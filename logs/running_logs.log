[2024-07-19 19:54:20,094: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 19:54:24,710: INFO: main: Players and Ball Detected]
[2024-07-19 19:54:24,715: INFO: main: Detecting Court]
[2024-07-19 19:54:26,751: INFO: main: Players Selected]
[2024-07-19 19:54:26,758: INFO: main: mini_court]
[2024-07-19 19:54:26,888: INFO: main: ball shots detected]
[2024-07-19 19:59:48,046: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 19:59:50,316: INFO: main: Players and Ball Detected]
[2024-07-19 19:59:50,316: INFO: main: Detecting Court]
[2024-07-19 19:59:51,593: INFO: main: Players Selected]
[2024-07-19 19:59:51,593: INFO: main: mini_court]
[2024-07-19 19:59:51,661: INFO: main: ball shots detected]
[2024-07-19 20:02:56,997: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:02:59,161: INFO: main: Players and Ball Detected]
[2024-07-19 20:02:59,161: INFO: main: Detecting Court]
[2024-07-19 20:03:00,861: INFO: main: Players Selected]
[2024-07-19 20:03:00,861: INFO: main: mini_court]
[2024-07-19 20:03:00,921: INFO: main: ball shots detected]
[2024-07-19 20:08:11,627: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:08:13,654: INFO: main: Players and Ball Detected]
[2024-07-19 20:08:13,666: INFO: main: Detecting Court]
[2024-07-19 20:08:14,998: INFO: main: Players Selected]
[2024-07-19 20:08:14,998: INFO: main: mini_court]
[2024-07-19 20:08:15,067: INFO: main: ball shots detected]
[2024-07-19 20:13:16,193: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:13:18,418: INFO: main: Players and Ball Detected]
[2024-07-19 20:13:18,418: INFO: main: Detecting Court]
[2024-07-19 20:13:20,033: INFO: main: Players Selected]
[2024-07-19 20:13:20,033: INFO: main: mini_court]
[2024-07-19 20:13:20,085: INFO: main: ball shots detected]
[2024-07-19 20:19:12,412: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:19:14,044: INFO: main: Players and Ball Detected]
[2024-07-19 20:19:14,044: INFO: main: Detecting Court]
[2024-07-19 20:19:15,363: INFO: main: Players Selected]
[2024-07-19 20:19:15,363: INFO: main: mini_court]
[2024-07-19 20:19:15,421: INFO: main: ball shots detected]
[2024-07-19 20:31:44,876: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:31:47,578: INFO: main: Players and Ball Detected]
[2024-07-19 20:31:47,578: INFO: main: Detecting Court]
[2024-07-19 20:31:49,026: INFO: main: Players Selected]
[2024-07-19 20:31:49,034: INFO: main: mini_court]
[2024-07-19 20:31:49,136: INFO: main: ball shots detected]
[2024-07-19 20:35:02,962: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:35:05,597: INFO: main: Players and Ball Detected]
[2024-07-19 20:35:05,598: INFO: main: Detecting Court]
[2024-07-19 20:35:06,761: INFO: main: Players Selected]
[2024-07-19 20:35:06,771: INFO: main: mini_court]
[2024-07-19 20:35:06,836: INFO: main: ball shots detected]
[2024-07-19 20:39:14,940: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:39:16,894: INFO: main: Players and Ball Detected]
[2024-07-19 20:39:16,894: INFO: main: Detecting Court]
[2024-07-19 20:39:18,226: INFO: main: Players Selected]
[2024-07-19 20:39:18,226: INFO: main: mini_court]
[2024-07-19 20:39:18,361: INFO: main: ball shots detected]
[2024-07-19 20:47:56,793: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 20:47:59,592: INFO: main: Players and Ball Detected]
[2024-07-19 20:47:59,592: INFO: main: Detecting Court]
[2024-07-19 20:48:01,628: INFO: main: Players Selected]
[2024-07-19 20:48:01,634: INFO: main: mini_court]
[2024-07-19 20:48:01,708: INFO: main: ball shots detected]
[2024-07-19 20:54:06,547: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 20:54:08,797: INFO: main: Players and Ball Detected]
[2024-07-19 20:54:08,797: INFO: main: Detecting Court]
[2024-07-19 20:54:10,014: INFO: main: Players Selected]
[2024-07-19 20:54:10,014: INFO: main: mini_court]
[2024-07-19 20:54:10,070: INFO: main: ball shots detected]
[2024-07-19 20:55:53,765: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 20:55:58,790: INFO: main: Players and Ball Detected]
[2024-07-19 20:55:58,790: INFO: main: Detecting Court]
[2024-07-19 20:56:00,073: INFO: main: Players Selected]
[2024-07-19 20:56:00,073: INFO: main: mini_court]
[2024-07-19 20:56:00,139: INFO: main: ball shots detected]
[2024-07-19 20:59:12,933: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 20:59:15,168: INFO: main: Players and Ball Detected]
[2024-07-19 20:59:15,172: INFO: main: Detecting Court]
[2024-07-19 20:59:15,187: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 20:59:15,191: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 20:59:17,194: INFO: main: Players Selected]
[2024-07-19 20:59:17,196: INFO: main: mini_court]
[2024-07-19 20:59:17,218: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,226: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,231: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,234: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,238: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,240: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,244: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,247: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,249: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,253: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 20:59:17,263: INFO: main: ball shots detected]
[2024-07-19 20:59:41,628: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\moviepy\video\io\ffmpeg_reader.py:123: UserWarning: Warning: in file output_videos/output_video.avi, 6220800 bytes wanted but 0 bytes read,at frame 214/215, at time 8.92/8.92 sec. Using the last valid frame instead.
  warnings.warn("Warning: in file %s, "%(self.filename)+
]
[2024-07-19 21:00:54,444: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 21:00:57,146: INFO: main: Players and Ball Detected]
[2024-07-19 21:00:57,150: INFO: main: Detecting Court]
[2024-07-19 21:00:57,164: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:00:57,167: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:00:58,287: INFO: main: Players Selected]
[2024-07-19 21:00:58,290: INFO: main: mini_court]
[2024-07-19 21:00:58,316: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,322: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,328: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,330: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,331: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,333: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,335: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,338: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,342: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,343: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:00:58,350: INFO: main: ball shots detected]
[2024-07-19 21:06:22,098: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 21:06:29,418: INFO: main: Players and Ball Detected]
[2024-07-19 21:06:29,419: INFO: main: Detecting Court]
[2024-07-19 21:06:29,422: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:06:29,424: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:06:30,723: INFO: main: Players Selected]
[2024-07-19 21:06:30,726: INFO: main: mini_court]
[2024-07-19 21:06:30,741: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,749: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,757: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,766: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,769: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,771: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,774: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,776: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,783: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,786: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:06:30,791: INFO: main: ball shots detected]
[2024-07-19 21:08:48,713: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 21:08:50,440: INFO: main: Players and Ball Detected]
[2024-07-19 21:08:50,440: INFO: main: Detecting Court]
[2024-07-19 21:08:50,442: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:08:50,442: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:08:51,670: INFO: main: Players Selected]
[2024-07-19 21:08:51,673: INFO: main: mini_court]
[2024-07-19 21:08:51,683: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,686: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,693: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,696: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,698: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,699: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,702: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,707: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,711: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,714: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:08:51,717: INFO: main: ball shots detected]
[2024-07-19 21:09:31,544: INFO: main: Reading video from input_videos\input_video.mp4]
[2024-07-19 21:09:35,718: INFO: main: Players and Ball Detected]
[2024-07-19 21:09:35,719: INFO: main: Detecting Court]
[2024-07-19 21:09:35,720: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:09:35,720: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:09:37,163: INFO: main: Players Selected]
[2024-07-19 21:09:37,165: INFO: main: mini_court]
[2024-07-19 21:09:37,174: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,178: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,185: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,190: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,192: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,195: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,199: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,202: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,205: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,213: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:09:37,223: INFO: main: ball shots detected]
[2024-07-19 21:13:24,706: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 21:13:26,620: INFO: main: Players and Ball Detected]
[2024-07-19 21:13:26,620: INFO: main: Detecting Court]
[2024-07-19 21:13:26,621: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:13:26,623: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:13:27,661: INFO: main: Players Selected]
[2024-07-19 21:13:27,663: INFO: main: mini_court]
[2024-07-19 21:13:27,682: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,685: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,689: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,690: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,692: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,694: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,696: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,697: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,699: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,700: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:13:27,707: INFO: main: ball shots detected]
[2024-07-19 21:16:48,775: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 21:16:50,808: INFO: main: Players and Ball Detected]
[2024-07-19 21:16:50,809: INFO: main: Detecting Court]
[2024-07-19 21:16:50,811: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:16:50,812: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:16:52,393: INFO: main: Players Selected]
[2024-07-19 21:16:52,396: INFO: main: mini_court]
[2024-07-19 21:16:52,522: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,532: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,544: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,545: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,548: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,551: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,554: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,556: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,559: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,561: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:16:52,575: INFO: main: ball shots detected]
[2024-07-19 21:18:35,722: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 21:18:37,591: INFO: main: Players and Ball Detected]
[2024-07-19 21:18:37,592: INFO: main: Detecting Court]
[2024-07-19 21:18:37,592: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:18:37,593: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:18:38,879: INFO: main: Players Selected]
[2024-07-19 21:18:38,881: INFO: main: mini_court]
[2024-07-19 21:18:38,898: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,901: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,905: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,907: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,909: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,910: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,912: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,915: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,917: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,923: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:18:38,929: INFO: main: ball shots detected]
[2024-07-19 21:25:16,514: INFO: main: Reading video from input_videos/input_video.mp4]
[2024-07-19 21:25:19,381: INFO: main: Players and Ball Detected]
[2024-07-19 21:25:19,385: INFO: main: Detecting Court]
[2024-07-19 21:25:19,399: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
]
[2024-07-19 21:25:19,402: WARNING: warnings: C:\Users\N Ramaraju\AppData\Local\Programs\Python\Python311\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
]
[2024-07-19 21:25:20,728: INFO: main: Players Selected]
[2024-07-19 21:25:20,734: INFO: main: mini_court]
[2024-07-19 21:25:20,799: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,808: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,817: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,820: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,825: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,827: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,829: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,831: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,836: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!
You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.
A typical example is when you are setting values in a column of a DataFrame, like:

df["col"][row_indexer] = value

Use `df.loc[row_indexer, "col"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy

  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,841: WARNING: warnings: C:\Users\N Ramaraju\Desktop\Projects\Tennis-Analysis\trackers\ball_tracker.py:50: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_ball_positions['ball_hit'].iloc[i] = 1
]
[2024-07-19 21:25:20,849: INFO: main: ball shots detected]
